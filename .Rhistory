v = c(1,2,3,3,4,NA,3,2,4,5,NA,5)
print("Original vector")
print(v)
print("Levels of factor of the said vector: ")
print(levels(factor(v)))
print(factor(v))
#Ex - 2
data = c("East", "West", "East", "North", "North", "East", "West", "West", "West", "East", "North")
print(data)
print(is.factor(data))
f_data = factor(data)
print(is.factor(data))
print(is.factor(f_data))
#program to change the first level of a factor with another level of given factor
v = c("a", "b", "a", "c", "b")
print("Original vector:")
print(v)
f = factor(v)
print("Factor of the said vector:")
print(f)
levels(f)[1] = levels(f)[3]
print(f)
#program to concatenate two given factors in a single factor
v = c("a", "b", "a", "c", "b")
data = c("East", "West", "East", "North", "North", "East", "West", "West", "West", "East", "North")
f1 = factor(v)
f2 = factor(data)
f3 = factor(c(f1, f2))
print(levels(f3))
# Ex - 1
v = c(1,2,3,3,4,NA,3,2,4,5,NA,5)
print("Original vector")
print(v)
print("Levels of factor of the said vector: ")
print(levels(factor(v)))
print(factor(v))
#Ex - 2
data = c("East", "West", "East", "North", "North", "East", "West", "West", "West", "East", "North")
print(data)
print(is.factor(data))
f_data = factor(data)
print(is.factor(f_data))
#program to change the first level of a factor with another level of given factor
v = c("a", "b", "a", "c", "b")
print("Original vector:")
print(v)
f = factor(v)
print("Factor of the said vector:")
print(f)
levels(f)[1] = levels(f)[3]
print(f)
#program to concatenate two given factors in a single factor
v = c("a", "b", "a", "c", "b")
data = c("East", "West", "East", "North", "North", "East", "West", "West", "West", "East", "North")
f1 = factor(v)
f2 = factor(data)
f3 = factor(c(f1, f2))
print(levels(f3))
library(datasets)
library(caTools)
library(party)
install.packages("caTools")
library(caTools)
install.packages("party")
install.packages("dplyr")
install.packages("magrittr")
library(datasets)
library(caTools)
library(party)
library(dplyr)
library(magrittr)
data("readingSkills")
head(readingSkills)
sample_data = sample.split(readingSkills, SplitRatio = 0.8)
train_data <- subset(readingSkills, sample_data == TRUE)
test_data <- subset(readingSkills, sample_data == FALSE)
model<- ctree(nativeSpeaker ~ ., train_data)
plot(model)
# testing the people who are native speakers
# and those who are not
predict_model<-predict(ctree_, test_data)
# creates a table to count how many are classified
# as native speakers and how many are not
m_at <- table(test_data$nativeSpeaker, predict_model)
# testing the people who are native speakers
# and those who are not
predict_model<-predict(model, test_data)
# creates a table to count how many are classified
# as native speakers and how many are not
m_at <- table(test_data$nativeSpeaker, predict_model)
m_at
ac_Test < - sum(diag(table_mat)) / sum(table_mat)
ac_Test <- sum(diag(table_mat)) / sum(table_mat)
ac_Test <- sum(diag(m_at)) / sum(m_at)
print(paste('Accuracy for test is found to be', ac_Test))
# Loading data
data(iris)
# Structure
str(iris)
# Installing Packages
install.packages("e1071")
install.packages("caTools")
install.packages("class")
# Loading package
library(e1071)
library(caTools)
library(class)
# Loading data
data(iris)
head(iris)
# Splitting data into train
# and test data
split <- sample.split(iris, SplitRatio = 0.7)
train_cl <- subset(iris, split == "TRUE")
test_cl <- subset(iris, split == "FALSE")
# Feature Scaling
train_scale <- scale(train_cl[, 1:4])
test_scale <- scale(test_cl[, 1:4])
# Fitting KNN Model
# to training dataset
classifier_knn <- knn(train = train_scale,
test = test_scale,
cl = train_cl$Species,
k = 1)
classifier_knn
# Confusiin Matrix
cm <- table(test_cl$Species, classifier_knn)
cm
# Model Evaluation - Choosing K
# Calculate out of Sample error
misClassError <- mean(classifier_knn != test_cl$Species)
print(paste('Accuracy =', 1-misClassError))
# K = 3
classifier_knn <- knn(train = train_scale,
test = test_scale,
cl = train_cl$Species,
k = 3)
misClassError <- mean(classifier_knn != test_cl$Species)
print(paste('Accuracy =', 1-misClassError))
# Loading data
data(iris)
# Structure
str(iris)
# Installing Packages
install.packages("ClusterR")
install.packages("cluster")
# Loading package
library(ClusterR)
library(cluster)
# Removing initial label of
# Species from original dataset
iris_1 <- iris[, -5]
# Fitting K-Means clustering Model
# to training dataset
set.seed(240) # Setting seed
kmeans.re <- kmeans(iris_1, centers = 3, nstart = 20)
kmeans.re
# Cluster identification for
# each observation
kmeans.re$cluster
# Confusion Matrix
cm <- table(iris$Species, kmeans.re$cluster)
cm
# Model Evaluation and visualization
plot(iris_1[c("Sepal.Length", "Sepal.Width")])
plot(iris_1[c("Sepal.Length", "Sepal.Width")],
col = kmeans.re$cluster)
plot(iris_1[c("Sepal.Length", "Sepal.Width")],
col = kmeans.re$cluster,
main = "K-means with 3 clusters")
## Plotiing cluster centers
kmeans.re$centers
kmeans.re$centers[, c("Sepal.Length", "Sepal.Width")]
# cex is font size, pch is symbol
points(kmeans.re$centers[, c("Sepal.Length", "Sepal.Width")],
col = 1:3, pch = 8, cex = 3)
## Visualizing clusters
y_kmeans <- kmeans.re$cluster
clusplot(iris_1[, c("Sepal.Length", "Sepal.Width")],
y_kmeans,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE,
main = paste("Cluster iris"),
xlab = 'Sepal.Length',
ylab = 'Sepal.Width')
# Model Evaluation and visualization
plot(iris_1[c("Sepal.Length", "Sepal.Width")])
plot(iris_1[c("Sepal.Length", "Sepal.Width")],
col = kmeans.re$cluster)
plot(iris_1[c("Sepal.Length", "Sepal.Width")],
col = kmeans.re$cluster,
main = "K-means with 3 clusters")
## Plotiing cluster centers
kmeans.re$centers
kmeans.re$centers[, c("Sepal.Length", "Sepal.Width")]
# cex is font size, pch is symbol
points(kmeans.re$centers[, c("Sepal.Length", "Sepal.Width")],
col = 1:3, pch = 8, cex = 3)
## Visualizing clusters
y_kmeans <- kmeans.re$cluster
clusplot(iris_1[, c("Sepal.Length", "Sepal.Width")],
y_kmeans,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE,
main = paste("Cluster iris"),
xlab = 'Sepal.Length',
ylab = 'Sepal.Width')
# Loading data
data(iris)
# Structure
str(iris)
# Loading package
library(ClusterR)
library(cluster)
# Removing initial label of
# Species from original dataset
iris_1 <- iris[, -5]
# Fitting K-Means clustering Model
# to training dataset
set.seed(240) # Setting seed
kmeans.re <- kmeans(iris_1, centers = 3, nstart = 20)
# Confusion Matrix
cm <- table(iris$Species, kmeans.re$cluster)
cm
# Loading data
data(iris)
# Structure
str(iris)
# Loading package
library(ClusterR)
library(cluster)
# Removing initial label of
# Species from original dataset
iris_1 <- iris[, -5]
# Fitting K-Means clustering Model
# to training dataset
set.seed(240) # Setting seed
kmeans.re <- kmeans(iris_1, centers = 3, nstart = 20)
# Confusion Matrix
cm <- table(iris$Species, kmeans.re$cluster)
cm
# creating a dataframe
data <- data.frame(marks1 = c(NA, 22, NA, 49, 75),
marks2 = c(81, 14, NA, 61, 12),
marks3 = c(78.5, 19.325, NA, 28, 48.002))
data
# using colMeans()
mean_val <- colMeans(data,na.rm = TRUE)
# replacing NA with mean value of each column
for(i in colnames(data))
data[,i][is.na(data[,i])] <- mean_val[i]
data
# Loading Libraries
library(arules)
install.packages("arules")
# Loading Libraries
library(arules)
# import dataset
data("Groceries")
# using apriori() function
rules <- apriori(Groceries,
parameter = list(supp = 0.01, conf = 0.2))
# using inspect() function
inspect(rules[1:10])
# using itemFrequencyPlot() function
arules::itemFrequencyPlot(Groceries, topN = 20,
col = brewer.pal(8, 'Pastel2'),
main = 'Relative Item Frequency Plot',
type = "relative",
ylab = "Item Frequency (Relative)")
# using itemFrequencyPlot() function
arules::itemFrequencyPlot(Groceries, topN = 20,,
main = 'Relative Item Frequency Plot',
type = "relative",
ylab = "Item Frequency (Relative)")
# using inspect() function
inspect(rules[1:10])
# using inspect() function
inspect(rules[1:4])
dput(colnames(mrs_age))
